{"version":3,"sources":["assets/hzd-logo.png","components/Template/Navbar.js","components/Template/Footer.js","components/Template/Layout.js","components/Template/ButtonLink.js","components/Home/Home.js","components/Template/Table.js","components/Machines/Machines.js","components/Admin/Login.js","components/Admin/AdminPanel.js","components/Admin/AddMachine.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","useState","isActive","setActive","className","role","to","onClick","classnames","data-target","id","Footer","Layout","children","ButtonLink","text","link","color","require","config","Home","src","hzdLogo","alt","TableRow","tableCells","Object","keys","map","key","index","Table","headers","data","header","machineHeaders","Machines","isAdmin","machines","setMachines","searchTerm","setSearchTerm","filteredMachines","useEffect","axios","get","process","then","response","filter","machine","search","toLowerCase","values","value","toString","includes","push","catch","error","console","log","name","type","onChange","event","target","placeholder","Login","username","setUsername","password","setPassword","history","useHistory","onSubmit","preventDefault","alert","AdminPanel","AddMachine","currentDate","Date","size","origin","override","machine_class","machine_sites","weakness","strength","weak_points","explosive_components","created_at","moment","format","updated_at","setValues","handleInputChange","handleSubmit","post","for","App","basename","exact","path","component","render","url","match","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.fe0a0556.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hzd-logo.51a04884.png\";","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport classnames from 'classnames';\n\nconst Navbar = () => {\n  const [isActive, setActive] = useState(false);\n\n  return (\n    <nav className=\"navbar is-fixed-top is-family-secondary has-background-black is-spaced is-transparent has-text-centered\" role=\"navigation\">\n      <div className=\"navbar-brand\">\n        <Link className=\"navbar-item has-text-weight-bold has-text-white is-size-4\" to=\"/\">Horizon Zero Dawn Wiki</Link>\n        <div className=\"navbar-burger\" onClick={() => setActive(!isActive)}>\n          <span></span>\n          <span></span>\n          <span></span>\n        </div>\n      </div>\n      <div className={classnames(\"navbar-menu\", isActive === true && \"is-active\")} data-target=\"navbar\">\n        <div id=\"navbar\" className=\"navbar-end is-size-5 has-text-centered\">\n          <Link className=\"navbar-item has-text-white has-text-weight-bold\" to=\"/machines\">Machines</Link>\n          <Link className=\"navbar-item has-text-white has-text-weight-bold\" to=\"/admin/login\">Admin</Link>\n        </div>\n      </div>\n    </nav>\n  )\n}\n\nexport default Navbar;","import React from 'react';\n\nconst Footer = () => {\n  return (\n    <div>\n      <h1>footer</h1>\n    </div>\n  )\n}\n\nexport default Footer;","import React from 'react';\nimport Navbar from './Navbar';\nimport Footer from './Footer';\n\nconst Layout = ({ children }) => {\n  return (\n    <div className=\"has-background-dark\">\n      <Navbar/>\n      <div className='has-navbar-fixed-top'>\n        <main>\n          {children}\n        </main>\n      </div>\n      <Footer/>\n    </div>\n  )\n}\n\nexport default Layout;","import React from 'react';\nimport { Link } from \"react-router-dom\";\n\nconst ButtonLink = ({ text, link, color }) => {\n  return (\n    <div className=\"control\">\n      <Link to={link}>\n        <button className={`button is-${color} has-text-weight-bold`}>\n          {text}\n        </button>\n      </Link>\n    </div>\n  )\n}\n\nexport default ButtonLink;","import React from 'react';\n\nimport Layout from '../Template/Layout';\nimport ButtonLink from '../Template/ButtonLink';\n\nimport '../../styles/variables.scss';\nimport hzdLogo from '../../assets/hzd-logo.png';\n\n\nrequire('dotenv').config()\n\nconst Home = () => {\n  return (\n    <Layout>\n      <div className=\"hero-section\">\n        <img src={hzdLogo} alt=\"logo\" />\n        <div className=\"field is-grouped mt-5\">\n          <ButtonLink text=\"View Machine Catalogue\" color=\"primary\" link=\"/machines\"/>\n          <ButtonLink text=\"Admin Login\" color=\"black\" link=\"/admin/login\"/>\n        </div>\n      </div>\n    </Layout>\n  )\n}\n\nexport default Home;\n","import React from 'react';\n\nconst TableRow = ({ tableCells }) => {\n  return (\n    <tr>\n      {Object.keys(tableCells).map((key, index) => (\n        <td key={index}>{tableCells[key]}</td>\n      ))}\n    </tr>\n  )\n}\n\nconst Table = ({ headers, data }) => {\n  return (\n    <table className='table is-fullwidth'>\n      <thead>\n        <tr>\n          {headers.map((header, index) => (\n            <th key={index}>{header}</th>\n          ))}\n        </tr>\n      </thead>\n      <tbody>\n        {data.map((data, index) => (\n          <TableRow key={index} tableCells={data}/>\n        ))}\n      </tbody>\n    </table>\n  )\n}\n\nexport default Table;","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nimport Layout from '../Template/Layout';\nimport Table from '../Template/Table';\nimport ButtonLink from '../Template/ButtonLink';\n\nconst machineHeaders = ['Name', 'Size', 'Origin', 'Override', 'Class', 'Machine Sites', 'Weakness', 'Strength', 'Weak Points', 'Explosive Components'];\n\nconst Machines = ({ isAdmin }) => {\n  const [machines, setMachines] = useState([])\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const filteredMachines = [];\n\n  useEffect(() => {\n    axios.get(`${process.env.REACT_APP_API_URL}`)\n    .then(response => {\n      // on initial page load, or if search bar is empty, display full list of machines\n      if(searchTerm === \"\") {\n        setMachines(response.data)\n      }\n      // if search bar is not empty, filter machines based on input value\n      else {\n        machines.filter(machine => {\n          let search = searchTerm.toLowerCase();\n          let values = Object.values(machine); // get values of each machine object\n\n          for (let value of values) {\n            if(value !== null && value.toString().toLowerCase().includes(search)) {\n              // if any of the values include the search term, push the machine into the filteredMachines array\n              filteredMachines.push(machine);\n              break; // break out of the loop as soon as the condition is met the first time\n            }\n          }\n        });\n        setMachines(filteredMachines);\n      }\n    })\n    .catch(error => console.log(error))\n    // eslint-disable-next-line\n  }, [searchTerm])\n\n  const handleInputChange = event => {\n    setSearchTerm(event.target.value);\n  }\n\n  return (\n    <Layout>\n      <div className=\"machines-section pt-6\">\n        <h1 className=\"pt-6 has-text-white title is-inline\">Machine Catalogue</h1>\n        {isAdmin &&\n            <div className=\"field is-grouped is-pulled-right\">\n              <ButtonLink text=\"Add Machine\" color=\"primary\" link=\"/admin/add-machine\"/>\n              <ButtonLink text=\"Edit Machine\" color=\"warning\" link=\"/admin/edit-machine\"/>\n              <ButtonLink text=\"Delete Machine\" color=\"danger\" link=\"/admin/delete-machine\"/>\n            </div>\n        }\n        <div className=\"field mt-4\">\n          <div className=\"control\">\n            <input className=\"input is-primary\" name=\"search\" type=\"text\" onChange={handleInputChange} value={searchTerm} placeholder=\"Search Machines\"/>\n          </div>\n        </div>\n        <Table headers={machineHeaders} data={machines}/>\n      </div>\n    </Layout>\n\n  )\n}\n\nexport default Machines;","import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport Layout from \"../Template/Layout\";\n\nconst Login = () => {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const history = useHistory();\n\n  const handleSubmit = event => {\n    event.preventDefault()\n    if (username === `${process.env.REACT_APP_USERNAME}` && password === `${process.env.REACT_APP_PASSWORD}`) {\n      history.push(`${process.env.REACT_APP_ADMIN_URL}`)\n    } else {\n      alert(\"unauthorized user\")\n    }\n  }\n\n\n  return (\n    <Layout>\n      <div className=\"login-section\">\n        <h1 className=\"title has-text-white\">Login</h1>\n        <form onSubmit={handleSubmit}>\n          <div className=\"field\">\n            <div className=\"control\">\n              <input className=\"input is-primary\" name=\"username\" type=\"text\" placeholder=\"Username\" onChange={event => setUsername(event.target.value)}/>\n            </div>\n          </div>\n          <div className=\"field\">\n            <div className=\"control\">\n              <input className=\"input is-primary\" name=\"password\" type=\"password\" placeholder=\"Password\" onChange={event => setPassword(event.target.value)}/>\n            </div>\n          </div>\n          <button className=\"button is-primary has-text-weight-bold\" type=\"submit\">Login</button>\n        </form>\n      </div>\n    </Layout>\n  )\n}\n\nexport default Login;","import React from 'react';\nimport Machines from '../Machines/Machines';\n\nconst AdminPanel = () => {\n  return (\n    <Machines isAdmin/>\n  )\n}\n\nexport default AdminPanel","import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport moment from \"moment\";\nimport { useHistory } from \"react-router-dom\";\n\nimport Layout from \"../Template/Layout\";\nimport \"../../styles/variables.scss\";\n\nconst AddMachine = () => {\n  const currentDate = new Date();\n  const history = useHistory();\n\n  const [values, setValues] = useState({\n    name: \"\",\n    size: \"\",\n    origin: \"\",\n    override: \"\",\n    machine_class: \"\",\n    machine_sites: 0,\n    weakness: \"\",\n    strength: \"\",\n    weak_points: \"\",\n    explosive_components: \"\",\n    created_at: moment(currentDate).format(\"MM-DD-YYYY\"),\n    updated_at: moment(currentDate).format(\"MM-DD-YYYY\")\n  })\n\n  const handleInputChange = event => {\n    const { name, value } = event.target\n    setValues({...values, [name]: value})\n  }\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    let data = values;\n\n    axios.post(process.env.REACT_APP_API_URL, data, {\n      headers: {\n        \"content-type\": \"application/json\",\n      }\n    })\n    .then(response => {\n      console.log(response.data);\n      alert(`${response.data.name} has been added to the machines database!`)\n      history.push(\"/machines\");\n    })\n    .catch(error => console.log(error))\n  }\n\n\n  return (\n    <Layout>\n      <div className=\"add-machine-section\">\n        <h1 className=\"title has-text-white has-text-center\">Add Machine</h1>\n        <form onSubmit={handleSubmit} name=\"addMachinesForm\">\n          <div className=\"field\">\n            <div className=\"control\">\n              <label for=\"name\" className=\"has-text-white\">Name</label>\n              <input className=\"input is-primary\" name=\"name\" type=\"text\" onChange={handleInputChange} value={values.name} placeholder=\"Name\"/>\n            </div>\n          </div>\n          <div className=\"field\">\n            <div className=\"control\">\n              <label for=\"size\" className=\"has-text-white\">Size</label>\n              <input className=\"input is-primary\" name=\"size\" type=\"text\" onChange={handleInputChange} value={values.size} placeholder=\"Size\"/>\n            </div>\n          </div>\n          <div className=\"field\">\n            <div className=\"control\">\n              <label for=\"origin\" className=\"has-text-white\">Origin</label>\n              <input className=\"input is-primary\" name=\"origin\" type=\"text\" onChange={handleInputChange} value={values.origin} placeholder=\"Origin\"/>\n            </div>\n          </div>\n          <div className=\"field\">\n            <div className=\"control\">\n              <label for=\"override\" className=\"has-text-white\">Override</label>\n              <input className=\"input is-primary\" name=\"override\" type=\"text\" onChange={handleInputChange} value={values.override} placeholder=\"Override\"/>\n            </div>\n          </div>\n          <div className=\"field\">\n            <div className=\"control\">\n              <label for=\"machine_class\" className=\"has-text-white\">Machine Class</label>\n              <input className=\"input is-primary\" name=\"machine_class\" type=\"text\" onChange={handleInputChange} value={values.machine_class} placeholder=\"Machine Class\"/>\n            </div>\n          </div>\n          <div className=\"field\">\n            <div className=\"control\">\n              <label for=\"machine_sites\" className=\"has-text-white\">Machine Sites</label>\n              <input className=\"input is-primary\" name=\"machine_sites\" type=\"number\" onChange={handleInputChange} value={values.machine_sites} placeholder=\"Machine Sites\"/>\n            </div>\n          </div>\n          <div className=\"field\">\n            <div className=\"control\">\n              <label for=\"weakness\" className=\"has-text-white\">Weakness</label>\n              <input className=\"input is-primary\" name=\"weakness\" type=\"text\" onChange={handleInputChange} value={values.weakness} placeholder=\"Weakness\"/>\n            </div>\n          </div>\n          <div className=\"field\">\n            <div className=\"control\">\n              <label for=\"strength\" className=\"has-text-white\">Strength</label>\n              <input className=\"input is-primary\" name=\"strength\" type=\"text\" onChange={handleInputChange} value={values.strength} placeholder=\"Strength\"/>\n            </div>\n          </div>\n          <div className=\"field\">\n            <div className=\"control\">\n              <label for=\"weak_points\" className=\"has-text-white\">Weak Points</label>\n              <input className=\"input is-primary\" name=\"weak_points\" type=\"text\" onChange={handleInputChange} value={values.weak_points} placeholder=\"Weak Points\"/>\n            </div>\n          </div>\n          <div className=\"field\">\n            <div className=\"control\">\n              <label for=\"explosive_components\" className=\"has-text-white\">Explosive Components</label>\n              <input className=\"input is-primary\" name=\"explosive_components\" type=\"text\" onChange={handleInputChange} value={values.explosive_components} placeholder=\"Explosive Components\"/>\n            </div>\n          </div>\n          <button className=\"button is-primary has-text-weight-bold\" type=\"submit\" onClick={handleSubmit}>Add Machine</button>\n        </form>\n      </div>\n    </Layout>\n  )\n}\n\nexport default AddMachine;","import React from 'react';\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\n\n// import Layout from './components/Template/Layout';\nimport Home from './components/Home/Home';\nimport Machines from './components/Machines/Machines';\nimport Login from './components/Admin/Login';\nimport AdminPanel from './components/Admin/AdminPanel';\nimport AddMachine from './components/Admin/AddMachine';\n\nconst App = () => {\n  return (\n    <BrowserRouter basename=\"/\">\n      <Switch>\n        <Route exact path='/' component={Home}/>\n        <Route path='/machines' component={Machines}/>\n        <Route\n          path=\"/admin\"\n          render={({ match: {url} }) => (\n            <>\n              <Route path={`${url}/login`} component={Login} exact />\n              <Route path={`${url}/machines`} component={AdminPanel}/>\n              <Route path={`${url}/add-machine`} component={AddMachine}/>\n            </>\n          )}\n        />\n      </Switch>\n    </BrowserRouter>\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/global.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { StaticRouter } from \"react-router\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <StaticRouter basename=\"/\">\n      <App />\n    </StaticRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}