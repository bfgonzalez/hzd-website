{"version":3,"sources":["assets/hzd-logo.png","components/Home/Home.js","components/Table/Table.js","components/Machines/Machines.js","components/Admin/Login.js","components/Admin/Admin.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","require","config","Home","className","src","hzdLogo","alt","to","TableRow","tableCells","Object","keys","map","key","index","Table","headers","data","header","machineHeaders","Machines","useState","machines","setMachines","useEffect","axios","get","process","then","response","catch","error","console","log","Login","username","setUsername","password","setPassword","history","useHistory","onSubmit","event","preventDefault","push","alert","name","type","placeholder","onChange","target","value","handleSubmit","Admin","onClick","result","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.4d45fff5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hzd-logo.51a04884.png\";","import React from 'react';\nimport { Link } from \"react-router-dom\";\n\nimport '../../styles/variables.scss';\nimport hzdLogo from '../../assets/hzd-logo.png';\n\nrequire('dotenv').config()\n\nconst Home = () => {\n  return (\n    <div className=\"hero-section\">\n      <img src={hzdLogo} alt=\"logo\" />\n      <div className=\"buttons\">\n        <Link to=\"/machines\">\n          <button className=\"button is-primary has-text-weight-bold mt-5 mr-4\">View Machine Catalogue</button>\n        </Link>\n        <Link to=\"/admin\">\n          <button className=\"button is-black has-text-white has-text-weight-bold mt-5\">Admin Login</button>\n        </Link>\n      </div>\n    </div>\n  )\n}\n\nexport default Home;\n","import React from 'react';\n\nconst TableRow = ({ tableCells }) => {\n  return (\n    <tr>\n      {Object.keys(tableCells).map((key, index) => (\n        <td key={index}>{tableCells[key]}</td>\n      ))}\n    </tr>\n  )\n}\n\nconst Table = ({ headers, data }) => {\n  return (\n    <table className='table'>\n      <thead>\n        <tr>\n          {headers.map((header, index) => (\n            <th key={index}>{header}</th>\n          ))}\n        </tr>\n      </thead>\n      <tbody>\n        {data.map((data, index) => (\n          <TableRow key={index} tableCells={data}/>\n        ))}\n      </tbody>\n    </table>\n  )\n}\n\nexport default Table;","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nimport Table from '../Table/Table';\n\nconst machineHeaders = ['Name', 'Size', 'Origin', 'Override', 'Class', 'Machine Sites', 'Weakness', 'Strength', 'Weak Points'];\n\nconst Machines = () => {\n  const [machines, setMachines] = useState([])\n\n  useEffect(() => {\n    axios.get(`${process.env.REACT_APP_API_URL}`)\n    .then(response => setMachines(response.data))\n    .catch(error => console.log(error))\n  }, [])\n\n  return (\n    <div>\n      <h1 className='title'>Machines</h1>\n      <Table headers={machineHeaders} data={machines}/>\n    </div>\n\n  )\n}\n\nexport default Machines;","import React, { useState, useEffect } from 'react';\nimport { useHistory } from \"react-router-dom\";\n\nconst Login = () => {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n\n  const history = useHistory();\n\n  const handleSubmit = event => {\n    event.preventDefault()\n    if (username === `${process.env.REACT_APP_USERNAME}` && password === `${process.env.REACT_APP_PASSWORD}`) {\n      history.push(`${process.env.REACT_APP_ADMIN_URL}`)\n    } else {\n      alert(\"you're not my master!\")\n    }\n  }\n\n\n  return (\n    <div>\n      <h1 className='title'>Login</h1>\n      <form onSubmit={handleSubmit}>\n        <div className=\"field\">\n          <div className=\"control\">\n            <input className=\"input is-primary\" name=\"username\" type=\"text\" placeholder=\"Username\" onChange={event => setUsername(event.target.value)}/>\n            <input className=\"input is-primary\" name=\"password\" type=\"password\" placeholder=\"Password\" onChange={event => setPassword(event.target.value)}/>\n          </div>\n        </div>\n        <button className='button is-primary has-text-weight-bold' type='submit'>Login</button>\n      </form>\n    </div>\n  )\n}\n\nexport default Login;","import React from 'react';\nimport axios from 'axios';\n\nimport '../../styles/variables.scss';\n\nconst handleSubmit = event => {\n  console.log(event)\n}\n\nconst Admin = () => {\n  return (\n    <div>\n      <h1 className='title'>Admin Panel</h1>\n      <form onSubmit={handleSubmit}>\n        <div className=\"field\">\n          <div className=\"control\">\n            <input className=\"input is-primary\" type=\"text\" placeholder=\"Add Machine\"/>\n          </div>\n        </div>\n        <button className='button is-primary has-text-weight-bold' type='submit' onClick={event => {console.log(event.target.result)}}>Add Machine</button>\n      </form>\n    </div>\n  )\n}\n\nexport default Admin;","import React from 'react';\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\n\nimport Home from './components/Home/Home';\nimport Machines from './components/Machines/Machines';\nimport Login from './components/Admin/Login';\nimport Admin from './components/Admin/Admin';\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact path='/' component={Home}/>\n        <Route path='/machines' component={Machines}/>\n        <Route path='/admin' component={Login}/>\n        <Route path={`${process.env.REACT_APP_ADMIN_URL}`} component={Admin}/>\n      </Switch>\n    </BrowserRouter>\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}